npm i -g typescript
1- npm init —y (create package.json file)

2- tsc —init (create tsconfig file from this command)
3- npm i @types/node
4-npm i -g ts-node (by using ts-node we don’t need to convert ts to js file it directly run our ts file)

now we install related to server or database
5- npm i express @types/express nodemon

in typescript if we call any function if we don’t return anything that have void type.

```jsx
app.listen(PORT || 5000, (): void => {
  console.log(`Server running on port ${PORT}`);
});
```

in typescript when we use req and res there default method type is defined.

```jsx
import express, { Request, Response } from "express";
app.use("/test", (req: Request, res: Response): void => {
  res.json({ data: "haii am a dev" });
});
```

if we run tsc command then we have to define the path of rootDir and outDir from tsconfig file.

```jsx
"rootDir":"./src"  spacify from where to run the file .
"outDir":"./build" specify the location where ts converted js file was stored
 all structured..
```

if we run our file directly using ts-node then

```jsx
"start:dev":"ts-node ./src/index.ts"
"start:prod":"ts-node --transpile-only ./src/index.ts"
```

in production mode we have to add —transpile-only to optimize memory utilization.

now we create our routes and controller separate in folder inside src.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/ee7b4b36-bca5-45b2-b464-4a1e3add85a9/b9dcfa02-8053-47f4-9b3f-d9a65b5a93e3/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/ee7b4b36-bca5-45b2-b464-4a1e3add85a9/70b6ef96-8825-4795-b8ab-87876d9885d1/Untitled.png)

now we install database like mongoose.
